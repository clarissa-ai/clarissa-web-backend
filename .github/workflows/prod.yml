#------------------------------------------------------------------
# GITHUB ACTIONS pipeline to deploy to preprod server
#------------------------------------------------------------------

name: Prod-Deploy

# Configuring some global environment variables that we will use in our jobs
env:
  S3_BUCKET_NAME: "clarissa.preprod"
  EB_APPLICATION_NAME: "Clarissa-Production"
  EB_ENVIRONMENT_NAME: "ClarissaProduction"
  DEPLOY_PACKAGE_NAME: "flask-app-${{ github.sha }}.zip"
  AWS_REGION_NAME: "us-east-2"

# This action will only run when the preprod branch is pushed to
on:
  push:
    branches: [ prod ]

# These jobs will run in chronological order
jobs:
  # This job builds runs our test suite, builds the package, and uploads it to our S3 bucket
  CI-Pipeline:
    runs-on: ubuntu-latest
    
    steps:
      - name: Clone our repository
        uses: actions/checkout@v1
      
      - name: Create zip deployment package
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x ".git"
      
      - name: Configure my AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MY_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}
          
      - name: Copy our deployment package to the S3 bucket
        run: aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.S3_BUCKET_NAME }}
      
      - name: Print confirmation message
        run: echo "Successfully completed CI pipeline"
  
  # This job deploys our newly build package to our AWS ElasticBeanstalk environment
  CD-Pipeline:
    runs-on: ubuntu-latest
    needs: [CI-Pipeline]
    
    steps:
      - name: Configure my AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MY_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}
          
      - name: Create new ElasticBeanstalk Application Version
        run : |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "PROD-Ver-${{ github.sha }}" \
          --description "CommitSHA-${{ github.sha }}"
       
      - name: Deploy new ElasticBeanstalk Application Version
        run : aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "PROD-Ver-${{ github.sha }}"
      
           
      - name: Print confirmation message
        run: echo "Successfully completed CD pipeline"
